{"version":3,"sources":["constants/ActionTypes.js","reducers/cart.js","reducers/products.js","reducers/index.js","api/shop.js","components/Product.js","components/ProductItem.js","components/ProductsList.js","containers/ProductsContainer.js","actions/index.js","components/Cart.js","containers/CartContainer.js","containers/App.js","index.js"],"names":["initialState","addedIds","quantityById","state","action","type","indexOf","productId","cart","products","inventory","combineReducers","byId","reduce","obj","product","id","visibleIds","map","getProduct","getVisibleProducts","getAddedIds","fromCart","getQuantity","fromProducts","getTotal","total","price","toFixed","getCartProducts","quantity","cb","timeout","setTimeout","_products","payload","Product","title","ProductItem","onAddToCartClicked","style","marginBottom","onClick","disabled","ProductsList","children","connect","addToCart","dispatch","getState","addToCartUnsafe","key","Cart","onCheckoutClicked","hasProducts","length","nodes","checkout","shop","App","middleware","thunk","store","createStore","reducer","applyMiddleware","receiveProducts","render","document","getElementById"],"mappings":"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","file":"static/js/main.20b6c95e.chunk.js","sourcesContent":["export const ADD_TO_CART = 'ADD_TO_CART'\nexport const CHECKOUT_REQUEST = 'CHECKOUT_REQUEST'\nexport const CHECKOUT_SUCCESS = 'CHECKOUT_SUCCESS'\nexport const CHECKOUT_FAILURE = 'CHECKOUT_FAILURE'\nexport const RECEIVE_PRODUCTS = 'RECEIVE_PRODUCTS'\n","import {\n  ADD_TO_CART,\n  CHECKOUT_REQUEST,\n  CHECKOUT_FAILURE\n} from '../constants/ActionTypes'\n\nconst initialState = {\n  addedIds: [],\n  quantityById: {}\n}\n\nconst addedIds = (state = initialState.addedIds, action) => {\n  switch (action.type) {\n    case ADD_TO_CART:\n      if (state.indexOf(action.productId) !== -1) {\n        return state\n      }\n      return [ ...state, action.productId ]\n    default:\n      return state\n  }\n}\n\nconst quantityById = (state = initialState.quantityById, action) => {\n  switch (action.type) {\n    case ADD_TO_CART:\n      const { productId } = action\n      return { ...state,\n        [productId]: (state[productId] || 0) + 1\n      }\n    default:\n      return state\n  }\n}\n\nexport const getQuantity = (state, productId) =>\n  state.quantityById[productId] || 0\n\nexport const getAddedIds = state => state.addedIds\n\nconst cart = (state = initialState, action) => {\n  switch (action.type) {\n    case CHECKOUT_REQUEST:\n      return initialState\n    case CHECKOUT_FAILURE:\n      return action.cart\n    default:\n      return {\n        addedIds: addedIds(state.addedIds, action),\n        quantityById: quantityById(state.quantityById, action)\n      }\n  }\n}\n\nexport default cart\n","import { combineReducers } from 'redux'\nimport { RECEIVE_PRODUCTS, ADD_TO_CART } from '../constants/ActionTypes'\n\nconst products = (state, action) => {\n  switch (action.type) {\n    case ADD_TO_CART:\n      return {\n        ...state,\n        inventory: state.inventory - 1\n      }\n    default:\n      return state\n  }\n}\n\nconst byId = (state = {}, action) => {\n  switch (action.type) {\n    case RECEIVE_PRODUCTS:\n      return {\n        ...state,\n        ...action.products.reduce((obj, product) => {\n          obj[product.id] = product\n          return obj\n        }, {})\n      }\n    default:\n      const { productId } = action\n      if (productId) {\n        return {\n          ...state,\n          [productId]: products(state[productId], action)\n        }\n      }\n      return state\n  }\n}\n\nconst visibleIds = (state = [], action) => {\n  switch (action.type) {\n    case RECEIVE_PRODUCTS:\n      return action.products.map(product => product.id)\n    default:\n      return state\n  }\n}\n\nexport default combineReducers({\n  byId,\n  visibleIds\n})\n\nexport const getProduct = (state, id) =>\n  state.byId[id]\n\nexport const getVisibleProducts = state =>\n  state.visibleIds.map(id => getProduct(state, id))\n","import { combineReducers } from 'redux'\nimport cart, * as fromCart from './cart'\nimport products, * as fromProducts from './products'\n\nexport default combineReducers({\n  cart,\n  products\n})\n\nconst getAddedIds = state => fromCart.getAddedIds(state.cart)\nconst getQuantity = (state, id) => fromCart.getQuantity(state.cart, id)\nconst getProduct = (state, id) => fromProducts.getProduct(state.products, id)\n\nexport const getTotal = state =>\n  getAddedIds(state)\n    .reduce((total, id) =>\n      total + getProduct(state, id).price * getQuantity(state, id),\n      0\n    )\n    .toFixed(2)\n\nexport const getCartProducts = state =>\n  getAddedIds(state).map(id => ({\n    ...getProduct(state, id),\n    quantity: getQuantity(state, id)\n  }))\n","/**\n * Mocking client-server processing\n */\nimport _products from './products.json'\n\nconst TIMEOUT = 100\n\nexport default {\n  getProducts: (cb, timeout) => setTimeout(() => cb(_products), timeout || TIMEOUT),\n  buyProducts: (payload, cb, timeout) => setTimeout(() => cb(), timeout || TIMEOUT)\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Product = ({ price, quantity, title }) => (\n  <div>\n    {title} - &#36;{price}{quantity ? ` x ${quantity}` : null}\n  </div>\n)\n\nProduct.propTypes = {\n  price: PropTypes.number,\n  quantity: PropTypes.number,\n  title: PropTypes.string\n}\n\nexport default Product\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Product from './Product'\n\nconst ProductItem = ({ product, onAddToCartClicked }) => (\n  <div style={{ marginBottom: 20 }}>\n    <Product\n      title={product.title}\n      price={product.price}\n      quantity={product.inventory} />\n    <button\n      onClick={onAddToCartClicked}\n      disabled={product.inventory > 0 ? '' : 'disabled'}>\n      {product.inventory > 0 ? 'Add to cart' : 'Sold Out'}\n    </button>\n  </div>\n)\n\nProductItem.propTypes = {\n  product: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    price: PropTypes.number.isRequired,\n    inventory: PropTypes.number.isRequired\n  }).isRequired,\n  onAddToCartClicked: PropTypes.func.isRequired\n}\n\nexport default ProductItem\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst ProductsList = ({ title, children }) => (\n  <div>\n    <h3>{title}</h3>\n    <div>{children}</div>\n  </div>\n)\n\nProductsList.propTypes = {\n  children: PropTypes.node,\n  title: PropTypes.string.isRequired\n}\n\nexport default ProductsList\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { addToCart } from '../actions'\nimport { getVisibleProducts } from '../reducers/products'\nimport ProductItem from '../components/ProductItem'\nimport ProductsList from '../components/ProductsList'\n\nconst ProductsContainer = ({ products, addToCart }) => (\n  <ProductsList title=\"Products\">\n    {products.map(product =>\n      <ProductItem\n        key={product.id}\n        product={product}\n        onAddToCartClicked={() => addToCart(product.id)} />\n    )}\n  </ProductsList>\n)\n\nProductsContainer.propTypes = {\n  products: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    price: PropTypes.number.isRequired,\n    inventory: PropTypes.number.isRequired\n  })).isRequired,\n  addToCart: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = state => ({\n  products: getVisibleProducts(state.products)\n})\n\nexport default connect(\n  mapStateToProps,\n  { addToCart }\n)(ProductsContainer)\n","import shop from '../api/shop'\nimport * as types from '../constants/ActionTypes'\n\nconst receiveProducts = products => ({\n  type: types.RECEIVE_PRODUCTS,\n  products\n})\n\nexport const getAllProducts = () => dispatch => {\n  shop.getProducts(products => {\n    dispatch(receiveProducts(products))\n  })\n}\n\nconst addToCartUnsafe = productId => ({\n  type: types.ADD_TO_CART,\n  productId\n})\n\nexport const addToCart = productId => (dispatch, getState) => {\n  if (getState().products.byId[productId].inventory > 0) {\n    dispatch(addToCartUnsafe(productId))\n  }\n}\n\nexport const checkout = products => (dispatch, getState) => {\n  const { cart } = getState()\n\n  dispatch({\n    type: types.CHECKOUT_REQUEST\n  })\n  shop.buyProducts(products, () => {\n    dispatch({\n      type: types.CHECKOUT_SUCCESS,\n      cart\n    })\n    // Replace the line above with line below to rollback on failure:\n    // dispatch({ type: types.CHECKOUT_FAILURE, cart })\n  })\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Product from './Product'\n\nconst Cart  = ({ products, total, onCheckoutClicked }) => {\n  const hasProducts = products.length > 0\n  const nodes = hasProducts ? (\n    products.map(product =>\n      <Product\n        title={product.title}\n        price={product.price}\n        quantity={product.quantity}\n        key={product.id}\n      />\n    )\n  ) : (\n    <em>Please add some products to cart.</em>\n  )\n\n  return (\n    <div>\n      <h3>Your Cart</h3>\n      <div>{nodes}</div>\n      <p>Total: &#36;{total}</p>\n      <button onClick={onCheckoutClicked}\n        disabled={hasProducts ? '' : 'disabled'}>\n        Checkout\n      </button>\n    </div>\n  )\n}\n\nCart.propTypes = {\n  products: PropTypes.array,\n  total: PropTypes.string,\n  onCheckoutClicked: PropTypes.func\n}\n\nexport default Cart\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { checkout } from '../actions'\nimport { getTotal, getCartProducts } from '../reducers'\nimport Cart from '../components/Cart'\n\nconst CartContainer = ({ products, total, checkout }) => (\n  <Cart\n    products={products}\n    total={total}\n    onCheckoutClicked={() => checkout(products)} />\n)\n\nCartContainer.propTypes = {\n  products: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    price: PropTypes.number.isRequired,\n    quantity: PropTypes.number.isRequired\n  })).isRequired,\n  total: PropTypes.string,\n  checkout: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = (state) => ({\n  products: getCartProducts(state),\n  total: getTotal(state)\n})\n\nexport default connect(\n  mapStateToProps,\n  { checkout }\n)(CartContainer)\n","import React from 'react'\nimport ProductsContainer from './ProductsContainer'\nimport CartContainer from './CartContainer'\n\nconst App = () => (\n  <div>\n    <h2>Shopping Cart Example</h2>\n    <hr/>\n    <ProductsContainer />\n    <hr/>\n    <CartContainer />\n  </div>\n)\n\nexport default App\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport { createLogger } from 'redux-logger'\nimport thunk from 'redux-thunk'\nimport reducer from './reducers'\nimport { getAllProducts } from './actions'\nimport App from './containers/App'\n\nconst middleware = [ thunk ];\nif (process.env.NODE_ENV !== 'production') {\n  middleware.push(createLogger());\n}\n\nconst store = createStore(\n  reducer,\n  applyMiddleware(...middleware)\n)\n\nstore.dispatch(getAllProducts())\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}